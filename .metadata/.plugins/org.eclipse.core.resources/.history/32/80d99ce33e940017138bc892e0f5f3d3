/*
 * capture.c
 *
 *  Created on: 4 de set de 2017
 *      Author: skelter_win
 */

#include "project_includes/capture.h"

uint32_t eventCount=0; // debug purpose


enum analogInputsADC0
{
    AIN0, AIN1, AIN2, AIN3, AIN4, AIN5, AIN6, AIN7, AIN_OFFSET
};

enum analogInputsADC1
{
    AIN8, AIN9, AIN10, AIN11, AIN12, AIN13, AIN14, AIN15
};

enum analogChannels
{
    CH0, CH1, CH2,  CH3,  CH4,  CH5,  CH6,  CH7,
    CH8, CH9, CH10, CH11, CH12, CH13, CH14, CH15,
    CHANNELS_COUNTER
};

enum fftIndex
{
    DC_SIN, DC_COS, H1_COS, H1_SIN, H2_COS, H2_SIN,
    H3_COS, H3_SIN, H4_COS, H4_SIN, H5_COS, H5_SIN,
    H6_COS, H6_SIN, H7_COS, H7_SIN, H8_COS, H8_SIN,
    H9_COS, H9_SIN, H10_COS, H10_SIN, H11_COS, H11_SIN,
    H12_COS, H12_SIN, H13_COS, H13_SIN, H14_COS, H14_SIN
};

enum outletNumber
{
    OUTLET_1, OUTLET_2, OUTLET_3, OUTLET_4, OUTLET_5, OUTLET_6, OUTLET_COUNTER
};
Outlet outlet[OUTLET_COUNTER];
float32_t ADCchannel[CHANNELS_COUNTER][SAMPLE_FRAME];

/* global variables */
float32_t debugOutlet1Phase[SAMPLE_FRAME];
float32_t debugOutlet1Diff[SAMPLE_FRAME];
float32_t debugOutlet1Voltage[SAMPLE_FRAME];

float32_t harmonics[26];

/**
 *              Calculate RMS value
 * Task created static (see RTOS_config.cfg). Process data
 * from DMA buffers and calculate rms value for AIN0...AIN15
 * If need, calculate fft for a specified channel.
 *
 */
void capture_Task(void)
{

    uint16_t i, j;


    outlet[OUTLET_1].limit = ptgmSettings.channel[0].channel_limit;
    outlet[OUTLET_1].peakCounter=0;

    while (1)
    {

        // wait here until g_uint16_adc0_ping is being filled by DMA
        Semaphore_pend(s_adc0_ping_ready, BIOS_WAIT_FOREVER);
        GPIO_write(DEBUG_PIN_CAPTURE, 1);
        // process first part of AIN0...AIN7
        for (i = 0, j = 0; i < SAMPLE_FRAME / 2; i++)
        {
            ADCchannel[CH0][i] = (float)g_uint16_adc0_ping[j + AIN0];
            ADCchannel[CH1][i] = (float)g_uint16_adc0_ping[j + AIN1];
            ADCchannel[CH2][i] = (float)g_uint16_adc0_ping[j + AIN2];
            ADCchannel[CH3][i] = (float)g_uint16_adc0_ping[j + AIN3];
            ADCchannel[CH4][i] = (float)g_uint16_adc0_ping[j + AIN4];
            ADCchannel[CH5][i] = (float)g_uint16_adc0_ping[j + AIN5];
            ADCchannel[CH6][i] = (float)g_uint16_adc0_ping[j + AIN6];
            ADCchannel[CH7][i] = (float)g_uint16_adc0_ping[j + AIN7];
            j += AIN_OFFSET;
        }
        GPIO_write(DEBUG_PIN_CAPTURE, 0);
        // wait here until g_uint16_adc1_ping is being filled by DMA
        Semaphore_pend(s_adc1_ping_ready, BIOS_WAIT_FOREVER);
        GPIO_write(DEBUG_PIN_CAPTURE, 1);
        // process first part of AIN8...AIN12
        for (i = 0, j = 0; i < SAMPLE_FRAME / 2; i++)
        {
            ADCchannel[CH8][i] = (float)g_uint16_adc1_ping[j + AIN8];
            ADCchannel[CH9][i] = (float)g_uint16_adc1_ping[j + AIN9];
            ADCchannel[CH10][i] = (float)g_uint16_adc1_ping[j + AIN10];
            ADCchannel[CH11][i] = (float)g_uint16_adc1_ping[j + AIN11];
            ADCchannel[CH12][i] = (float)g_uint16_adc1_ping[j + AIN12];
            ADCchannel[CH13][i] = (float)g_uint16_adc1_ping[j + AIN13];
            ADCchannel[CH14][i] = (float)g_uint16_adc1_ping[j + AIN14];
            ADCchannel[CH15][i] = (float)g_uint16_adc1_ping[j + AIN15];

            j += AIN_OFFSET;
        }
        GPIO_write(DEBUG_PIN_CAPTURE, 0);
        // wait here until g_uint16_adc0_pong is being filled by DMA
        Semaphore_pend(s_adc0_pong_ready, BIOS_WAIT_FOREVER);
        GPIO_write(DEBUG_PIN_CAPTURE, 1);
        // process last part of AIN0...AIN7
        for (i = 128, j = 0; i < SAMPLE_FRAME; i++)
        {
            ADCchannel[CH0][i] = (float)g_uint16_adc0_ping[j + AIN0];
            ADCchannel[CH1][i] = (float)g_uint16_adc0_ping[j + AIN1];
            ADCchannel[CH2][i] = (float)g_uint16_adc0_ping[j + AIN2];
            ADCchannel[CH3][i] = (float)g_uint16_adc0_ping[j + AIN3];
            ADCchannel[CH4][i] = (float)g_uint16_adc0_ping[j + AIN4];
            ADCchannel[CH5][i] = (float)g_uint16_adc0_ping[j + AIN5];
            ADCchannel[CH6][i] = (float)g_uint16_adc0_ping[j + AIN6];
            ADCchannel[CH7][i] = (float)g_uint16_adc0_ping[j + AIN7];
            j += AIN_OFFSET;
        }


        for(i=0;i<CHANNELS_COUNTER/2;i++)
        {
//            arm_offset_f32(ADCchannel[i], -ADC_OFFSET,ADCchannel[i], SAMPLE_FRAME);
//            arm_scale_f32(ADCchannel[i], ADC_SCALE, ADCchannel[i], SAMPLE_FRAME);
//            arm_rms_f32(ADCchannel[i], SAMPLE_FRAME, &outlet[i].phaseRMS);
        }
//        // apply ADC_OFFSET
//        arm_offset_f32(outlet1PhaseWave, -ADC_OFFSET, outlet1PhaseWave, SAMPLE_FRAME);
//        arm_offset_f32(outlet1DiffWave, -ADC_OFFSET, outlet1DiffWave,   SAMPLE_FRAME);
//        arm_offset_f32(outlet2PhaseWave, -ADC_OFFSET, outlet2PhaseWave, SAMPLE_FRAME);
//        arm_offset_f32(outlet2DiffWave, -ADC_OFFSET, outlet2DiffWave,   SAMPLE_FRAME);
//        arm_offset_f32(outlet3PhaseWave, -ADC_OFFSET, outlet3PhaseWave, SAMPLE_FRAME);
//        arm_offset_f32(outlet3DiffWave, -ADC_OFFSET, outlet3DiffWave,   SAMPLE_FRAME);
//        arm_offset_f32(outlet4PhaseWave, -ADC_OFFSET, outlet4PhaseWave, SAMPLE_FRAME);
//        arm_offset_f32(outlet4DiffWave, -ADC_OFFSET, outlet4DiffWave,   SAMPLE_FRAME);
//        // scale to ADC_SCALE value
//        arm_scale_f32(outlet1PhaseWave, ADC_SCALE, outlet1PhaseWave, SAMPLE_FRAME);
//        arm_scale_f32(outlet1DiffWave, ADC_SCALE, outlet1DiffWave,   SAMPLE_FRAME);
//        arm_scale_f32(outlet2PhaseWave, ADC_SCALE, outlet2PhaseWave, SAMPLE_FRAME);
//        arm_scale_f32(outlet2DiffWave, ADC_SCALE, outlet2DiffWave,   SAMPLE_FRAME);
//        arm_scale_f32(outlet3PhaseWave, ADC_SCALE, outlet3PhaseWave, SAMPLE_FRAME);
//        arm_scale_f32(outlet3DiffWave, ADC_SCALE, outlet3DiffWave,   SAMPLE_FRAME);
//        arm_scale_f32(outlet4PhaseWave, ADC_SCALE, outlet4PhaseWave, SAMPLE_FRAME);
//        arm_scale_f32(outlet4DiffWave, ADC_SCALE, outlet4DiffWave,   SAMPLE_FRAME);
//        // calculate rms value
//        arm_rms_f32(outlet1PhaseWave, SAMPLE_FRAME, &outlet[OUTLET_1].phaseRMS);//&Outlet1PhaseRMS);
//        arm_rms_f32(outlet1DiffWave, SAMPLE_FRAME, &Outlet1DiffRMS);
//        arm_rms_f32(outlet2PhaseWave, SAMPLE_FRAME, &Outlet2PhaseRMS);
//        arm_rms_f32(outlet2DiffWave, SAMPLE_FRAME, &Outlet2DiffRMS);
//        arm_rms_f32(outlet3PhaseWave, SAMPLE_FRAME, &Outlet3PhaseRMS);
//        arm_rms_f32(outlet3DiffWave, SAMPLE_FRAME, &Outlet3DiffRMS);
//        arm_rms_f32(outlet4PhaseWave, SAMPLE_FRAME, &Outlet4PhaseRMS);
//        arm_rms_f32(outlet4DiffWave, SAMPLE_FRAME, &Outlet4DiffRMS);

        GPIO_write(DEBUG_PIN_CAPTURE, 0);
        // wait here until g_uint16_adc1_ping is being filled by DMA
        Semaphore_pend(s_adc1_pong_ready, BIOS_WAIT_FOREVER);
        GPIO_write(DEBUG_PIN_CAPTURE, 1);
        // process first part of AIN8...AIN12
        for (i = 128, j = 0; i < SAMPLE_FRAME; i++)
        {
            ADCchannel[CH8][i] = (float)g_uint16_adc1_ping[j + AIN8];
            ADCchannel[CH9][i] = (float)g_uint16_adc1_ping[j + AIN9];
            ADCchannel[CH10][i] = (float)g_uint16_adc1_ping[j + AIN10];
            ADCchannel[CH11][i] = (float)g_uint16_adc1_ping[j + AIN11];
            ADCchannel[CH12][i] = (float)g_uint16_adc1_ping[j + AIN12];
            ADCchannel[CH13][i] = (float)g_uint16_adc1_ping[j + AIN13];
            ADCchannel[CH14][i] = (float)g_uint16_adc1_ping[j + AIN14];
            ADCchannel[CH15][i] = (float)g_uint16_adc1_ping[j + AIN15];
        }

//        for(i=(CHANNELS_COUNTER+1)/2;i<CHANNELS_COUNTER+1;i++)
//        {
//            arm_offset_f32(ADCchannel[i], -ADC_OFFSET,ADCchannel[i], SAMPLE_FRAME);
//            arm_scale_f32(ADCchannel[i], ADC_SCALE, ADCchannel[i], SAMPLE_FRAME);
//            arm_rms_f32(ADCchannel[i], SAMPLE_FRAME, &outlet[i].phaseRMS);
//        }
        // apply ADC_OFFSET
//        arm_offset_f32(outlet5PhaseWave, -ADC_OFFSET, outlet5PhaseWave, SAMPLE_FRAME);
//        arm_offset_f32(outlet5DiffWave, -ADC_OFFSET, outlet5DiffWave,   SAMPLE_FRAME);
//        arm_offset_f32(outlet6PhaseWave, -ADC_OFFSET, outlet6PhaseWave, SAMPLE_FRAME);
//        arm_offset_f32(outlet6DiffWave, -ADC_OFFSET, outlet6DiffWave,   SAMPLE_FRAME);
//        arm_offset_f32(outlet123VoltageWave, -ADC_OFFSET, outlet123VoltageWave, SAMPLE_FRAME);
//        arm_offset_f32(outlet456VoltageWave, -ADC_OFFSET, outlet456VoltageWave,   SAMPLE_FRAME);
//        // scale to ADC_SCALE value
//        arm_scale_f32(outlet5PhaseWave, ADC_SCALE, outlet5PhaseWave, SAMPLE_FRAME);
//        arm_scale_f32(outlet5DiffWave, ADC_SCALE, outlet5DiffWave,   SAMPLE_FRAME);
//        arm_scale_f32(outlet6PhaseWave, ADC_SCALE, outlet6PhaseWave, SAMPLE_FRAME);
//        arm_scale_f32(outlet6DiffWave, ADC_SCALE, outlet6DiffWave,   SAMPLE_FRAME);
//        arm_scale_f32(outlet123VoltageWave, ADC_SCALE, outlet123VoltageWave, SAMPLE_FRAME);
//        arm_scale_f32(outlet456VoltageWave, ADC_SCALE, outlet456VoltageWave,   SAMPLE_FRAME);
//        // calculate rms value
//        arm_rms_f32(outlet5PhaseWave, SAMPLE_FRAME, &Outlet5PhaseRMS);
//        arm_rms_f32(outlet5DiffWave, SAMPLE_FRAME, &Outlet5DiffRMS);
//        arm_rms_f32(outlet6PhaseWave, SAMPLE_FRAME, &Outlet6PhaseRMS);
//        arm_rms_f32(outlet6DiffWave, SAMPLE_FRAME, &Outlet6DiffRMS);
//        arm_rms_f32(outlet123VoltageWave, SAMPLE_FRAME, &Outlet123VoltageRMS);
//        arm_rms_f32(outlet456VoltageWave, SAMPLE_FRAME, &Outlet456VoltageRMS);
//
//        // debug waves
       arm_copy_f32(ADCchannel[0], debugOutlet1Phase, SAMPLE_FRAME);
       arm_copy_f32(ADCchannel[1], debugOutlet1Diff, SAMPLE_FRAME);
       arm_copy_f32(ADCchannel[2], debugOutlet1Voltage, SAMPLE_FRAME);

       // TODO: Create if condition to decide when fft needs to be calculated
       // create dynamic task to calculate fft
       GPIO_write(DEBUG_PIN_CAPTURE, 0);
       //static int x=0;
       if (outlet[OUTLET_1].phaseRMS > outlet[OUTLET_1].limit)//(Outlet1PhaseRMS>0.5)
       {
           outlet[OUTLET_1].peakCounter++;//x++;
       }
       else
       {
           outlet[OUTLET_1].peakCounter=0;
       }

       if(outlet[OUTLET_1].peakCounter > 3)
       {
           arm_rfft_fast_instance_f32 s;
           arm_rfft_fast_init_f32(&s, SAMPLE_FRAME);
           //arm_rfft_fast_f32(&s, ADCchannel[0], ADCchannel[0], 0);
           // outlet1Phasefft: [0]dc_cos, [1]dc_sin, [2]H1_cos, [3]H1_sin, [4]H2_cos, [4]H2_sin...

           Semaphore_pend(s_critical_section, BIOS_WAIT_FOREVER);
               for(i=0;i<(2 * ptgmSettings.maxHarmonics)+2;i++)
               {
                   //outlet[OUTLET_1].phaseFFT[i]=outlet1Phasefft[i];//harmonics[i]=outlet1Phasefft[i];
                   //harmonics[i]=ADCchannel[];
                   outlet[OUTLET_1].phaseFFT = harmonics;
               }
               char g_str_PostSend[POST_DATA_SIZE];
               sprintf(g_str_PostSend,
                                "TYPE=04&"          // TODO: Possible values?
                                "OUTLET=02&"        // 1 to 6
                                "RFID=FFFF0001&"    // ID of connected equipment
                                "OFFSET=2228&"      // Channel specific ADC offset value, ideally 2048 (2^10/2)
                                "GAIN=4302B611&"    // Channel specific Gain
                                "RMS=%08X&"         // Channel actual rms value
                                "MV=00000000&"      // Channel mean value
                                "MV2=00000000&"     // TODO: ?
                                "UNDER=0000&"       // TODO: under Peak?
                                "OVER=0000&"        // TODO: over peak?
                                "DURATION=0000&"    // TODO: how is calculated
                                "SIN=%08X;%08X;%08X;%08X;%08X;%08X;%08X;%08X;%08X;%08X;%08X;%08X&"     // Imaginary part
                                "COS=%08X;%08X;%08X;%08X;%08X;%08X;%08X;%08X;%08X;%08X;%08X;%08X ",    // Real part
                                *(unsigned int*)&outlet[OUTLET_1].phaseRMS,
                                *(unsigned int*)&outlet[OUTLET_1].phaseFFT[H1_SIN],
                                *(unsigned int*)&outlet[OUTLET_1].phaseFFT[H2_SIN],
                                *(unsigned int*)&outlet[OUTLET_1].phaseFFT[H3_SIN],
                                *(unsigned int*)&outlet[OUTLET_1].phaseFFT[H4_SIN],
                                *(unsigned int*)&outlet[OUTLET_1].phaseFFT[H5_SIN],
                                *(unsigned int*)&outlet[OUTLET_1].phaseFFT[H6_SIN],
                                *(unsigned int*)&outlet[OUTLET_1].phaseFFT[H7_SIN],
                                *(unsigned int*)&outlet[OUTLET_1].phaseFFT[H8_SIN],
                                *(unsigned int*)&outlet[OUTLET_1].phaseFFT[H9_SIN],
                                *(unsigned int*)&outlet[OUTLET_1].phaseFFT[H10_SIN],
                                *(unsigned int*)&outlet[OUTLET_1].phaseFFT[H11_SIN],
                                *(unsigned int*)&outlet[OUTLET_1].phaseFFT[H12_SIN],
                                *(unsigned int*)&outlet[OUTLET_1].phaseFFT[H1_COS],
                                *(unsigned int*)&outlet[OUTLET_1].phaseFFT[H2_COS],
                                *(unsigned int*)&outlet[OUTLET_1].phaseFFT[H3_COS],
                                *(unsigned int*)&outlet[OUTLET_1].phaseFFT[H4_COS],
                                *(unsigned int*)&outlet[OUTLET_1].phaseFFT[H5_COS],
                                *(unsigned int*)&outlet[OUTLET_1].phaseFFT[H6_COS],
                                *(unsigned int*)&outlet[OUTLET_1].phaseFFT[H7_COS],
                                *(unsigned int*)&outlet[OUTLET_1].phaseFFT[H8_COS],
                                *(unsigned int*)&outlet[OUTLET_1].phaseFFT[H9_COS],
                                *(unsigned int*)&outlet[OUTLET_1].phaseFFT[H10_COS],
                                *(unsigned int*)&outlet[OUTLET_1].phaseFFT[H11_COS],
                                *(unsigned int*)&outlet[OUTLET_1].phaseFFT[H12_COS]);

               static Task_Handle httpPOST_Handle;
               Task_Params httpPOST_Params;
               Error_Block httpPOST_eb;

               Error_init(&httpPOST_eb);
               Task_Params_init(&httpPOST_Params);
               httpPOST_Params.stackSize = HTTPTASKSTACKSIZE;
               httpPOST_Params.priority = 1;
               httpPOST_Params.arg0 = (xdc_UArg)g_str_PostSend;
               httpPOST_Handle = Task_create((Task_FuncPtr)httpPOST_Task, &httpPOST_Params, &httpPOST_eb);
               if (httpPOST_Handle == NULL)
                   {
                       Log_info0("captureTask: Failed to create HTTP POST Task\n");
                   }
               eventCount++;
           //Task_sleep(100);
           outlet[OUTLET_1].peakCounter=0;//x=0;
           Semaphore_post(s_critical_section);

       }
     GPIO_write(DEBUG_PIN_CAPTURE, 0);
    }
}

