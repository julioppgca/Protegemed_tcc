/* Standard variables definitions */
#include <stdint.h>
#include <stdbool.h>

/* XDCtools Header files */
#include <xdc/std.h>
#include <xdc/runtime/Error.h>
#include <xdc/runtime/System.h>
#include <xdc/runtime/Diags.h>
#include <xdc/runtime/Log.h>   // to use Log_Info
#include <xdc/cfg/global.h> // to get static definitions from RTOS.cfg file

/* BIOS Header files */
#include <ti/sysbios/BIOS.h>
#include <ti/sysbios/knl/Swi.h>
#include <ti/sysbios/knl/Task.h>
#include <ti/sysbios/knl/Semaphore.h>

/* Project Header files */
#include "project_includes/Board.h"
#include "project_includes/adc_sample.h"
#include "project_includes/eth_network.h"

/* ARM Math CMSIS DSP */
#include <arm_math.h>

enum analogChannelsADC0
{
    AIN0, AIN1, AIN2, AIN3, AIN4, AIN5, AIN6, AIN7, AIN_OFFSET
};
enum analogChannelsADC1
{
    AIN8, AIN9, AIN10, AIN11, AIN12, AIN13, AIN14, AIN15
};

/* global variables */
float32_t outlet1PhaseWave[SAMPLE_FRAME];      // Connected to AIN0
float32_t outlet1DiffWave[SAMPLE_FRAME];       // Connected to AIN1

float32_t outlet2PhaseWave[SAMPLE_FRAME];      // Connected to AIN2
float32_t outlet2DiffWave[SAMPLE_FRAME];       // Connected to AIN3

float32_t outlet3PhaseWave[SAMPLE_FRAME];      // Connected to AIN4
float32_t outlet3DiffWave[SAMPLE_FRAME];       // Connected to AIN5

float32_t outlet4PhaseWave[SAMPLE_FRAME];      // Connected to AIN6
float32_t outlet4DiffWave[SAMPLE_FRAME];       // Connected to AIN7

float32_t outlet5PhaseWave[SAMPLE_FRAME];      // Connected to AIN8
float32_t outlet5DiffWave[SAMPLE_FRAME];       // Connected to AIN9

float32_t outlet6PhaseWave[SAMPLE_FRAME];      // Connected to AIN10
float32_t outlet6DiffWave[SAMPLE_FRAME];       // Connected to AIN11

float32_t outlet123VoltageWave[SAMPLE_FRAME];  // Connected to AIN12
float32_t outlet456VoltageWave[SAMPLE_FRAME];  // Connected to AIN13

/*
 *  ======== main ========
 */
int main(void)
{
    /* Call board init functions */
    Board_initGeneral();
    Board_initGPIO();
    Board_initEMAC();

    System_printf("\n*--------------- Protegemed TM4C ----------------*\n");
    System_printf("\nPeripheral initiated..." "\nStarting BIOS...\n");
    /* SysMin will only print to the console when you call flush or exit */
    System_flush();

    /* Start BIOS */
    BIOS_start();

    return (0);
}

/* initialize ADC/DMA data acquisition */
void initSamplesTask(void)
{
    DMA_init();
    ADC_init();
    TIMER_ADC_init(SAMPLE_FREQUENCY);
    Log_info0("InitSamples Task started.");
}

/* compute rms value  */
void rmsCalc_Task(void)
{
    uint16_t i, j;

    while (1)
    {
        // wait here until g_uint16_adc0_ping is being filled by DMA
        Semaphore_pend(s_adc0_ping_ready, BIOS_WAIT_FOREVER);

        // process first part of AIN0...AIN7
        for (i = 0, j = 0; i < SAMPLE_FRAME / 2; i++)
        {
            outlet1PhaseWave[i] = g_uint16_adc0_ping[j + AIN0];
            outlet1DiffWave[i] = g_uint16_adc0_ping[j + AIN1];
            outlet2PhaseWave[i] = g_uint16_adc0_ping[j + AIN2];
            outlet2DiffWave[i] = g_uint16_adc0_ping[j + AIN3];
            outlet3PhaseWave[i] = g_uint16_adc0_ping[j + AIN4];
            outlet3DiffWave[i] = g_uint16_adc0_ping[j + AIN5];
            outlet4PhaseWave[i] = g_uint16_adc0_ping[j + AIN6];
            outlet4DiffWave[i] = g_uint16_adc0_ping[j + AIN7];
            j += AIN_OFFSET;
        }

        // wait here until g_uint16_adc1_ping is being filled by DMA
        Semaphore_pend(s_adc1_ping_ready, BIOS_WAIT_FOREVER);

        // process first part of AIN8...AIN12
        for (i = 0, j = 0; i < SAMPLE_FRAME / 2; i++)
        {
            outlet5PhaseWave[i] = g_uint16_adc0_ping[j + AIN8];
            outlet5DiffWave[i] = g_uint16_adc0_ping[j + AIN9];
            outlet6PhaseWave[i] = g_uint16_adc0_ping[j + AIN10];
            outlet6DiffWave[i] = g_uint16_adc0_ping[j + AIN11];
            outlet123PhaseWave[i] = g_uint16_adc0_ping[j + AIN12];
            outlet345DiffWave[i] = g_uint16_adc0_ping[j + AIN13];

            j += AIN_OFFSET;
        }

        // wait here until g_uint16_adc0_pong is being filled by DMA
        Semaphore_pend(s_adc0_pong_ready, BIOS_WAIT_FOREVER);

        // process second part
        for (i = 128, j = 0; i < SAMPLE_FRAME; i++)
        {
            outlet1PhaseWave[i] = g_uint16_adc0_ping[j + AIN0];
            outlet1DiffWave[i] = g_uint16_adc0_ping[j + AIN1];
            outlet2PhaseWave[i] = g_uint16_adc0_ping[j + AIN2];
            outlet2DiffWave[i] = g_uint16_adc0_ping[j + AIN3];
            outlet3PhaseWave[i] = g_uint16_adc0_ping[j + AIN4];
            outlet3DiffWave[i] = g_uint16_adc0_ping[j + AIN5];
            outlet4PhaseWave[i] = g_uint16_adc0_ping[j + AIN6];
            outlet4DiffWave[i] = g_uint16_adc0_ping[j + AIN7];
            j += (AIN7 + 1);
        }

        // wait here until g_uint16_adc1_ping is being filled by DMA
        Semaphore_pend(s_adc1_pong_ready, BIOS_WAIT_FOREVER);

        // process first part of AIN8...AIN12
        for (i = 128, j = 0; i < SAMPLE_FRAME; i++)
        {
            outlet5PhaseWave[i] = g_uint16_adc0_ping[j + AIN8];
            outlet5DiffWave[i] = g_uint16_adc0_ping[j + AIN9];
            outlet6PhaseWave[i] = g_uint16_adc0_ping[j + AIN10];
            outlet6DiffWave[i] = g_uint16_adc0_ping[j + AIN11];
            outlet123VoltageWave[i] = g_uint16_adc0_ping[j + AIN12];
            outlet456VoltageWave[i] = g_uint16_adc0_ping[j + AIN13];

            j += AIN_OFFSET;
        }

    }
}

/* heart beat from RTOS*/
void heartBeat_Task(void)
{
    while (1)
    {
        GPIO_toggle(Board_LED0);    // blink LED
        Task_sleep(500);            // goto to sleep
    }
}
