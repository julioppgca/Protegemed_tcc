/*
 *    ======== eth_network.c ========
 *    Contains non-BSD sockets code (NDK Network Open Hook)
 */

#include "project_includes/eth_network.h"
#include <string.h>

// julio begin
#include <string.h>

/* XDCtools Header files */
#include <xdc/runtime/Error.h>
#include <xdc/runtime/System.h>

/* TI-RTOS Header files */
#include <ti/sysbios/BIOS.h>
#include <ti/sysbios/knl/Task.h>
#include <ti/drivers/GPIO.h>
#include <ti/net/http/httpcli.h>

#include <string.h>
#include <stdio.h>
#include <sys/socket.h>

#define REQUEST_URI     "/Ptgm-Scripts/capture.php"
#define HOSTNAME        "192.168.2.171"//"www.example.com"
#define CONTENT_TYPE    "application/x-www-form-urlencoded"//"Content-Type: application/x-www-form-urlencoded"
#define DATA            "TYPE=04&OUTLET=01&RFID=FFFF0001&OFFSET=2228&GAIN=4302B611&RMS=3ED36D93&MV=00000000&MV2=00000000&UNDER=0000&OVER=0000&DURATION=0000&SIN=4292CF1D%3BC017B7BC%3BBECFCC14%3BBF8634A0%3BBF576C4A%3BBEC518EA%3BBE7B2DAE%3BBE7586A8%3BBF30B264%3BBF075AEE%3BBF080748%3BBE27BBF6&COS=41A4DB52%3BBE4EBD48%3B3F4A0DC7%3BBDD97BE8%3BBE4AFD96%3BBD237492%3B3D7BB817%3B3EC9AD66%3BBE8DFB00%3BBD607EF0%3BBE0E5FDA%3B3D1FF56F "

#define USER_AGENT          "HTTPCli (ARM; TI-RTOS)"
#define HTTPTASKSTACKSIZE   4096
// julio end

Void httpTask(UArg arg0, UArg arg1);

extern uint16_t g_uint16_adc0_ping[];


/*
 *  ======== tcpWorker ========
 *  Task to handle TCP connection. Can be multiple Tasks running
 *  this function.
 */
Void tcpWorker(UArg arg0, UArg arg1)
{
    int  clientfd = (int)arg0;
    char buffer[TCPPACKETSIZE];

    System_printf("tcpWorker: start clientfd = 0x%x\n", clientfd);

    recv(clientfd, buffer, TCPPACKETSIZE, 0);


    switch (buffer[0])
        {
        case '?':
        {
            send(clientfd, "brave new world!", 16, 0);
            break;
        }
        case 'r':
        {
            static Task_Handle taskHandle;
               Task_Params taskParams;
               Error_Block eb;

               /* Create a HTTP task when the IP address is added */
               if (fAdd && !taskHandle) {
                   Error_init(&eb);

                   Task_Params_init(&taskParams);
                   taskParams.stackSize = HTTPTASKSTACKSIZE;
                   taskParams.priority = 1;
                   taskHandle = Task_create((Task_FuncPtr)httpTask, &taskParams, &eb);
                   if (taskHandle == NULL) {
                       printError("netIPAddrHook: Failed to create HTTP Task\n", -1);
                   }
               }
        }
        default:
        {
            send(clientfd, "Unknown Command", 15, 0);
            break;
        }

        }

    System_printf("tcpWorker stop clientfd = 0x%x\n", clientfd);

    close(clientfd);
}

/*
 *  ======== tcpHandler ========
 *  Creates new Task to handle new TCP connections.
 */
Void tcpHandler(UArg arg0, UArg arg1)
{
    int                status;
    int                clientfd;
    int                server;
    struct sockaddr_in localAddr;
    struct sockaddr_in clientAddr;
    int                optval;
    int                optlen = sizeof(optval);
    socklen_t          addrlen = sizeof(clientAddr);
    Task_Handle        taskHandle;
    Task_Params        taskParams;
    Error_Block        eb;

    server = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    if (server == -1) {
        System_printf("Error: socket not created.\n");
        goto shutdown;
    }


    memset(&localAddr, 0, sizeof(localAddr));
    localAddr.sin_family = AF_INET;
    localAddr.sin_addr.s_addr = htonl(INADDR_ANY);
    localAddr.sin_port = htons(arg0);

    status = bind(server, (struct sockaddr *)&localAddr, sizeof(localAddr));
    if (status == -1) {
        System_printf("Error: bind failed.\n");
        goto shutdown;
    }

    status = listen(server, NUMTCPWORKERS);
    if (status == -1) {
        System_printf("Error: listen failed.\n");
        goto shutdown;
    }

    optval = 1;
    if (setsockopt(server, SOL_SOCKET, SO_KEEPALIVE, &optval, optlen) < 0) {
        System_printf("Error: setsockopt failed\n");
        goto shutdown;
    }

    while ((clientfd =
            accept(server, (struct sockaddr *)&clientAddr, &addrlen)) != -1) {

        System_printf("tcpHandler: Creating thread clientfd = %d\n", clientfd);

        /* Init the Error_Block */
        Error_init(&eb);

        /* Initialize the defaults and set the parameters. */
        Task_Params_init(&taskParams);
        taskParams.arg0 = (UArg)clientfd;
        taskParams.stackSize = 1280;
        taskHandle = Task_create((Task_FuncPtr)tcpWorker, &taskParams, &eb);
        if (taskHandle == NULL) {
            System_printf("Error: Failed to create new Task\n");
            close(clientfd);
        }

        /* addrlen is a value-result param, must reset for next accept call */
        addrlen = sizeof(clientAddr);
    }

    System_printf("Error: accept failed.\n");

shutdown:
    if (server > 0) {
        close(server);
    }
}


/*
 *  ======== netOpenHook ========
 *  NDK network open hook used to initialize IPv6
 */
void netOpenHook()
{
    Task_Handle taskHandle;
    Task_Params taskParams;
    Error_Block eb;

    /* Make sure Error_Block is initialized */
    Error_init(&eb);

    /*
     *  Create the Task that farms out incoming TCP connections.
     *  arg0 will be the port that this task listens to.
     */
    Task_Params_init(&taskParams);
    taskParams.stackSize = TCPHANDLERSTACK;
    taskParams.priority = 1;
    taskParams.arg0 = TCPPORT;
    taskHandle = Task_create((Task_FuncPtr)tcpHandler, &taskParams, &eb);
    if (taskHandle == NULL) {
        System_printf("netOpenHook: Failed to create tcpHandler Task\n");
    }

    System_flush();
}

///*
// *  ======== printError ========
// */
//void printError(char *errString, int code)
//{
//    System_printf("Error! code = %d, desc = %s\n", code, errString);
//    System_flush();
//    //BIOS_exit(code);
//}

/*
 *  ======== httpTask ========
 *  Makes a HTTP GET request
 */
Void httpTask(UArg arg0, UArg arg1)
{
    bool moreFlag = false;
    char data[600];
    int ret;
    int len;
    char CONTENT_LENGTH[3];
    struct sockaddr_in addr;


    //Data to be sent
    strcpy(data, "{\"val\": 10}");

    len = sizeof(DATA);
    sprintf(CONTENT_LENGTH, "%d", len);

    System_printf("\nData: %s\n", DATA);
    System_printf("len(int): %d\n", len);
    System_printf("CONTENT_LENGTH: %s\n", CONTENT_LENGTH);

    HTTPCli_Struct cli;
    HTTPCli_Field fields[3] = {
        { HTTPStd_FIELD_NAME_HOST, HOSTNAME },
        { HTTPStd_FIELD_NAME_USER_AGENT, USER_AGENT },
        { NULL, NULL }
    };

    System_printf("Sending a HTTP POST request to '%s'\n", HOSTNAME);
    System_flush();

    HTTPCli_construct(&cli);

    HTTPCli_setRequestFields(&cli, fields);

    ret = HTTPCli_initSockAddr((struct sockaddr *)&addr, HOSTNAME, 0);
    if (ret < 0) {
        printError("httpTask: address resolution failed", ret);
    }

    ret = HTTPCli_connect(&cli, (struct sockaddr *)&addr, 0, NULL);
    if (ret < 0) {
        printError("httpTask: connect failed", ret);
    }

//************************************************************************************************************
    ret = HTTPCli_sendRequest(&cli, HTTPStd_POST, REQUEST_URI, true);
    if (ret < 0) {
        printError("httpTask: send failed", ret);
    }
//    else {
//        System_printf("sendRequest successful\n");
//    }

    //ret = HTTPCli_sendField(&cli, HTTPStd_FIELD_NAME_HOST, "192.168.2.171", false);
    ret = HTTPCli_sendField(&cli, HTTPStd_FIELD_NAME_CONTENT_LENGTH, CONTENT_LENGTH, false);
    ret = HTTPCli_sendField(&cli, HTTPStd_FIELD_NAME_CONTENT_TYPE, CONTENT_TYPE, true);

    if (ret < 0) {
        printError("httpTask: send failed", ret);
    }
//    else {
//        System_printf("sendField successful\n");
//    }

        ret = HTTPCli_sendRequestBody(&cli, DATA, sizeof(DATA));
    if (ret < 0) {
        printError("httpTask: Variable data couldn't be sent", ret);
    }
    else {
        System_printf("Data sent successfully\n");
    }
//*******************************************************************************************************************************

    ret = HTTPCli_getResponseStatus(&cli);
    if (ret != HTTPStd_OK) {
        printError("httpTask: cannot get status", ret);
    }

    System_printf("HTTP Response Status Code: %d\n", ret);

    ret = HTTPCli_getResponseField(&cli, data, sizeof(data), &moreFlag);

    if (ret != HTTPCli_FIELD_ID_END) {
        printError("httpTask: response field processing failed", ret);
    }

    len = 0;
    do {
        ret = HTTPCli_readResponseBody(&cli, data, sizeof(data), &moreFlag);
        if (ret < 0) {
            printError("httpTask: response body processing failed", ret);
        }

        len += ret;
    } while (moreFlag);

    System_printf("Received: %s", data);
    System_flush();

    float f = -0.201894;
    char temp[26];

    sprintf(temp,"&RMS=%08X",*(unsigned int*)&f);


    HTTPCli_disconnect(&cli);
    HTTPCli_destruct(&cli);
}
